using System;
using System.Web.Caching;
using DotNetNuke.Common.Utilities;
using DotNetNuke.ComponentModel.DataAnnotations;
using DotNetNuke.Entities.Content;
using System.Collections.Generic;
using DotNetNuke.Data;
using System.Linq;

public class CompanyController
{
//create
public Company CreateCompany(Company t)
{
	using (IDataContext ctx = DataContext.Instance())
	{
		var rep = ctx.GetRepository<Company>();
		rep.Insert(t);
	}
	return t;
}
//update
public Company UpdateCompany(Company t)
{
	using (IDataContext ctx = DataContext.Instance())
	{
		var rep = ctx.GetRepository<Company>();
		rep.Update(t);
	}
	return t;
}
//delete
public void DeleteCompanyByPrimKey(string ID)
{
	var t = GetCompanysByPrimKey(ID);
	//DeleteCompany(t.First());
	DeleteCompany(ID);
}
public void DeleteCompany(string id)
{
	using (IDataContext ctx = DataContext.Instance())
	{
		var rep = ctx.GetRepository<Company>();
		rep.Delete("where  = @0", id);
		//rep.Delete(t);
	}
}
//get
public IEnumerable<Company> GetCompanys()
{
	IEnumerable<Company> t;
	using (IDataContext ctx = DataContext.Instance())
	{
		var rep = ctx.GetRepository<Company>();
		t = rep.Get();
	}
	return t;
}
//get by sql
public IEnumerable<Company> GetCompanysByPrimKey(string ID)
{
	IEnumerable<Company> t;
	using (IDataContext context = DataContext.Instance())
	{
		var rep = context.GetRepository<Company>();
		t = rep.Find("where  = @0", ID);
	}
	return t;
}
//get by sql
public IEnumerable<sp_ClaimFormDetails> GetCompanysBySQL()
{
	using (IDataContext db = DataContext.Instance())
	{
		return db.ExecuteQuery<sp_ClaimFormDetails>(System.Data.CommandType.Text, "");
	}
}
}

//for another method
public IList<Task> GetTasks(int ModuleID)
{
	return CBO.FillCollection<Task>(DataProvider.Instance().ExecuteReader("CBP_GetTasks", ModuleID));
}
[AllowAnonymous]
[HttpGet]
public HttpResponseMessage GetTasks(int moduleId)
{
	try
	{
	   var tasks = new TaskController().GetTasks(moduleId).ToJson();
		return Request.CreateResponse(HttpStatusCode.OK, tasks);
	}
	catch (Exception exc)
	{
		return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
	}
}

<script type="text/javascript">
var moduleId = <%= ModuleId %>;
    $.getJSON(
        "/DesktopModules/MyFirstModule/API/ModuleTask/GetTasks?moduleId=" + moduleId,
       function (result) {
           var parsedTaskJSONObject = jQuery.parseJSON(result);
            $.each(parsedTaskJSONObject, function () {
                if (this.isComplete == true) {
                    $('.ListItems').append(
                        '<div class="checkbox"><input class="cbxListIsComplete" type="checkbox" checked/></div>' +
                            '<div class="ListTaskName">' + this.TaskName + '</div>' +
                            '<div class="ListTaskDescription">' + this.TaskDescription + '</div>');
                }
                else {
                    $('.ListItems').append(
                        '<div class="checkbox"><input class="cbxListIsComplete" type="checkbox"/></div>' +
                        '<div class="ListTaskName">' + this.TaskName + '</div>' +
                        '<div class="ListTaskDescription">' + this.TaskDescription + '</div>');
                }
            });
        });
</script>