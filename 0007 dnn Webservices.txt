[DnnModuleAuthorize(AccessLevel = SecurityAccessLevel.View)]
[ValidateAntiForgeryToken]
[HttpPost]
public HttpResponseMessage AddTask(TaskToCreateDTO DTO)
{
	try
	{
		var task = new Task()
		{
			TaskName = DTO.TTC_TaskName,
			TaskDescription = DTO.TTC_TaskDescription,
			isComplete = DTO.TTC_isComplete,
			ModuleId = DTO.TTC_ModuleID,
			UserId = DTO.TTC_UserId
		};
		TaskController tc = new TaskController();
		tc.AddTask(task);
		return Request.CreateResponse(HttpStatusCode.OK, task);
	}
	catch (Exception exc)
	{
		return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
	}
}

[AllowAnonymous]
[HttpGet]
public HttpResponseMessage GetTasks(int moduleId)
{
	try
	{
		var tasks = new TaskController().GetTasks(moduleId).ToJson();
		return Request.CreateResponse(HttpStatusCode.OK, tasks);
	}
	catch (Exception exc)
	{
		return Request.CreateErrorResponse(HttpStatusCode.InternalServerError, exc);
	}
}