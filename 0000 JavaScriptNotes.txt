<!--JavaScript Guide: 1.Introduction-->
may be need to re-read




<!--JavaScript Guide: 2.Grammar and types-->
{
case-sensitive
Unicode 
statements
identifiers (id) //need to start by letters
'$' ('A'~'Z') ('a'~'z') '_'
var a = null;
console.log(a * 32); // Will log 0 to the console
var a;
a + 2;  // Evaluates to NaN
var a;
console.log("The value of a is " + a); // The value of a is undefined,false
}
{
Function hoisting
/* Function declaration */
foo(); // "bar"
function foo() {
  console.log("bar");
}
/* Function expression */
baz(); // TypeError: baz is not a function
var baz = function() {
  console.log("bar2");
};
}
{
var unusualPropertyNames = {
  "": "An empty string",
  "!": "Bang!"
}
console.log(unusualPropertyNames."");   // SyntaxError: Unexpected string
console.log(unusualPropertyNames[""]);  // An empty string
console.log(unusualPropertyNames.!);    // SyntaxError: Unexpected token !
console.log(unusualPropertyNames["!"]); // Bang!
var name = "Bob", time = "today";
`Hello ${name}, how are you ${time}?`
}
{
miss:
var obj = {
    // __proto__
    __proto__: theProtoObj,
    // Shorthand for ‘handler: handler’
    handler,
    // Methods
    toString() {
     // Super calls
     return "d " + super.toString();
    },
    // Computed (dynamic) property names
    [ 'prop_' + (() => 42)() ]: 42
};
}




<!--JavaScript Guide: 3.Control flow and error handling-->
{
var b = new Boolean(false);
if (b) // this condition evaluates to true
if (b == true) // this condition evaluates to false
}
{
function f() {
  try {
    console.log(0);
    throw "bogus";
  } catch(e) {
    console.log(1);
    return true; // this return statement is suspended
                 // until finally block has completed
    console.log(2); // not reachable
  } finally {
    console.log(3);
    return false; // overwrites the previous "return"
    console.log(4); // not reachable
  }
  // "return false" is executed now  
  console.log(5); // not reachable
}
f(); // console 0, 1, 3; returns false
}
{
miss:
PromisesEDIT
Loading an image with XHR
}




<!--JavaScript Guide: 4.Loops and iteration-->





<!--Introductory: 1.JavaScript basics-->
var myName = prompt('Please enter your name.');
localStorage.setItem('name', myName);
var storedName = localStorage.getItem('name');




<!--Introductory: 2.JavaScript technologies overview-->
其他重要的 APIEDIT
setTimeout 和 setInterval 函數首次納入 HTML 標準中的 Window 介面
XMLHttpRequest：允許傳送非同步 HTTP 請求的 API。
CSS Object Model：CSSOM 用來將 CSS 的規則轉換為物件。
WebWorkers：允許平行計算的 API。
WebSockets：允許低階雙向溝通的 API。
Canvas 2D Context：canvas 元素的繪圖 API。




<!--Introductory: 3.Introduction to Object Oriented JavaScript-->

