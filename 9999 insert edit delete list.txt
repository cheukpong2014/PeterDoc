***********************************************************************************
^^^^
using System;
using System.Web.Caching;
using DotNetNuke.Common.Utilities;
using DotNetNuke.ComponentModel.DataAnnotations;
using DotNetNuke.Entities.Content;

namespace Christoc.Modules.DNNModule8.Components
{
    [TableName("DNNModule8_Companys")]
    //setup the primary key for table
    [PrimaryKey("id", AutoIncrement = true)]
    //configure caching using PetaPoco
    [Cacheable("Companys", CacheItemPriority.Default, 20)]
    //scope the objects to the ModuleId of a module on a page (or copy of a module on a page)
    [Scope("ModuleId")]
    public class Company
    {
        ///<summary>
        /// The ID of your object with the name of the ItemName
        ///</summary>
        public int id { get; set; }
        ///<summary>
        /// A string with the name of the ItemName
        ///</summary>
        public string CompanyName { get; set; }

        ///<summary>
        /// A string with the description of the object
        ///</summary>
        public string CompanyAddress { get; set; }
        public int ModuleId { get; set; }
    }
}






***********************************************************************************
^^^^
using System.Collections.Generic;
using DotNetNuke.Data;

namespace Christoc.Modules.DNNModule8.Components
{
    public class CompanyController
    {
        public void CreateCompany(Company t)
        {
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<Company>();
                rep.Insert(t);
            }
        }
        
        public void DeleteCompany(int CompanyId, int moduleId)
        {
            var t = GetCompany(CompanyId, moduleId);
            DeleteCompany(t);
        }

        public void DeleteCompany(Company t)
        {
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<Company>();
                rep.Delete(t);
            }
        }

        public IEnumerable<Company> GetCompanys(int moduleId)
        {
            IEnumerable<Company> t;
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<Company>();
                t = rep.Get(moduleId);
            }
            return t;
        }

        public Company GetCompany(int CompanyId, int moduleId)
        {
            Company t;
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<Company>();
                t = rep.GetById(CompanyId, moduleId);
            }
            return t;
        }

        public void UpdateCompany(Company t)
        {
            using (IDataContext ctx = DataContext.Instance())
            {
                var rep = ctx.GetRepository<Company>();
                rep.Update(t);
            }
        }
        public IEnumerable<Company> GetCompanyBySql()
        {
            IEnumerable<Company> companys;
            using (IDataContext context = DataContext.Instance())
            {
                var repository = context.GetRepository<Company>();
                companys = repository.Find("WHERE ModuleId = 1234", true);
            }
            return companys;
        }
    }
}






***********************************************************************************
^^^^
<asp:Button ID="Button1" runat="server" Text="Insert Item" OnClick="Button1_Click" />
<asp:Button ID="Button2" runat="server" Text="Insert Company" OnClick="Button2_Click" />


<asp:Button ID="Button3" runat="server" Text="Delete Company" OnClick="Button3_Click" />



<asp:Repeater runat="server" ID="rptShowRegion">
        <HeaderTemplate><ul class="showColorUL"></HeaderTemplate>
            <ItemTemplate><li><div class="showRegionDIV"><div OfficeRegionID="<%#Eval("id")%>" style="cursor:pointer;"><%#Eval("CompanyName")%></div></div></li></ItemTemplate>
        <FooterTemplate></ul></FooterTemplate>
    </asp:Repeater>






***********************************************************************************
^^^^
/*
' Copyright (c) 2016  Christoc.com
'  All rights reserved.
' 
' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
' TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
' THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
' CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
' DEALINGS IN THE SOFTWARE.
' 
*/

using System;
using System.Web.UI.WebControls;
using Christoc.Modules.DNNModule8.Components;
using DotNetNuke.Security;
using DotNetNuke.Services.Exceptions;
using DotNetNuke.Entities.Modules;
using DotNetNuke.Entities.Modules.Actions;
using DotNetNuke.Services.Localization;
using DotNetNuke.UI.Utilities;
using System.Linq;

namespace Christoc.Modules.DNNModule8
{
    /// -----------------------------------------------------------------------------
    /// <summary>
    /// The View class displays the content
    /// 
    /// Typically your view control would be used to display content or functionality in your module.
    /// 
    /// View may be the only control you have in your project depending on the complexity of your module
    /// 
    /// Because the control inherits from DNNModule8ModuleBase you have access to any custom properties
    /// defined there, as well as properties from DNN such as PortalId, ModuleId, TabId, UserId and many more.
    /// 
    /// </summary>
    /// -----------------------------------------------------------------------------
    public partial class View : DNNModule8ModuleBase, IActionable
    {
        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                var tc = new ItemController();
                rptItemList.DataSource = tc.GetItems(ModuleId);
                rptItemList.DataBind();


                CompanyController cmc = new CompanyController();

                rptShowRegion.DataSource = from cc in cmc.GetCompanyBySql()
                                           select new
                                           {
                                               CompanyName = cc.CompanyName,
                                               CompanyAddress = cc.CompanyAddress,
                                               id = cc.id
                                           };
                rptShowRegion.DataBind();
            }
            catch (Exception exc) //Module failed to load
            {
                Exceptions.ProcessModuleLoadException(this, exc);
            }
        }

        protected void rptItemListOnItemDataBound(object sender, RepeaterItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.AlternatingItem || e.Item.ItemType == ListItemType.Item)
            {
                var lnkEdit = e.Item.FindControl("lnkEdit") as HyperLink;
                var lnkDelete = e.Item.FindControl("lnkDelete") as LinkButton;

                var pnlAdminControls = e.Item.FindControl("pnlAdmin") as Panel;

                var t = (Item)e.Item.DataItem;

                if (IsEditable && lnkDelete != null && lnkEdit != null && pnlAdminControls != null)
                {
                    pnlAdminControls.Visible = true;
                    lnkDelete.CommandArgument = t.ItemId.ToString();
                    lnkDelete.Enabled = lnkDelete.Visible = lnkEdit.Enabled = lnkEdit.Visible = true;

                    lnkEdit.NavigateUrl = EditUrl(string.Empty, string.Empty, "Edit", "tid=" + t.ItemId);

                    ClientAPI.AddButtonConfirm(lnkDelete, Localization.GetString("ConfirmDelete", LocalResourceFile));
                }
                else
                {
                    pnlAdminControls.Visible = false;
                }
            }
        }


        public void rptItemListOnItemCommand(object source, RepeaterCommandEventArgs e)
        {
            if (e.CommandName == "Edit")
            {
                Response.Redirect(EditUrl(string.Empty, string.Empty, "Edit", "tid=" + e.CommandArgument));
            }

            if (e.CommandName == "Delete")
            {
                var tc = new ItemController();
                tc.DeleteItem(Convert.ToInt32(e.CommandArgument), ModuleId);
            }
            Response.Redirect(DotNetNuke.Common.Globals.NavigateURL());
        }

        public ModuleActionCollection ModuleActions
        {
            get
            {
                var actions = new ModuleActionCollection
                    {
                        {
                            GetNextActionID(), Localization.GetString("EditModule", LocalResourceFile), "", "", "",
                            EditUrl(), false, SecurityAccessLevel.Edit, true, false
                        }
                    };
                return actions;
            }
        }

        protected void Button1_Click(object sender, EventArgs e)
        {
            ItemController itc = new ItemController();
            Item it = new Item();
            it.ItemName = "i3";
            it.ItemDescription = "i38000";
            it.AssignedUserId = 1;
            it.ModuleId = 1366;
            it.CreatedOnDate = DateTime.Now;
            it.CreatedByUserId = 1;
            it.LastModifiedOnDate = DateTime.Now;
            it.LastModifiedByUserId = 1;

            itc.CreateItem(it);
        }

        protected void Button2_Click(object sender, EventArgs e)
        {
            CompanyController cmc = new CompanyController();
            Company cm = new Company();
            cm.CompanyName = "first";
            cm.CompanyAddress = "TST";
            cm.ModuleId = 1366;

            cmc.CreateCompany(cm);
        }

        protected void Button3_Click(object sender, EventArgs e)
        {
            CompanyController cmc = new CompanyController();
            Company cm = new Company();
            cm.CompanyName = "first";
            cm.CompanyAddress = "TST";
            cm.ModuleId = 1366;

            cmc.DeleteCompany(1,1366);
        }
    }
}






***********************************************************************************
^^^^







***********************************************************************************
^^^^







***********************************************************************************
^^^^







